#include <util/atomic.h>

volatile uint32_t lastBRAKEsignal;
volatile uint32_t lastINDICATORsignal;

const int BRAKEsignal = 6;
const int INDICATORsignal = 8;
const int BRAKElight = 10;
const int INDICATORlight = 12;

const int seconds = 10;
int seconds_in_millis = seconds * 1000;

int brakestate = 0;
int test_char = 0; 


void setup() {
  Serial.begin(9600);

  updateLastBRAKE();
  updateLastINDICATOR();

  //sets input pins to capture signals and output pins to drive relays
  pinMode(BRAKElight, OUTPUT);
  pinMode(BRAKEsignal, INPUT_PULLUP);
  pinMode(INDICATORsignal, INPUT_PULLUP);
  pinMode(INDICATORlight, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(BRAKEsignal), updateLastBRAKE, HIGH);
}


void loop(){
  brakeLight();
  indicatorLight();
  updateLastBRAKE();
}

void updateLastBRAKE(){
  lastBRAKEsignal = millis();
  Serial.println(lastBRAKEsignal);
  delay(10);
}

void updateLastINDICATOR(){
  lastINDICATORsignal = millis();
}

void indicatorLight(){
  int indicatorstate = 0;
  
  indicatorstate = digitalRead(INDICATORsignal);
  //Serial.println(indicatorstate);
  delay(10);
  
  if (indicatorstate == 1) {
    digitalWrite(INDICATORlight, HIGH);
    delay(500);
    digitalWrite(INDICATORlight,LOW);
    delay(500);
  } else {
    digitalWrite(BRAKElight, LOW);
  }
}

void brakeLight(){ 
  brakestate = digitalRead(BRAKEsignal);
  
  if (brakestate == 1) {
    digitalWrite(BRAKElight, HIGH);
  } else {
    digitalWrite(BRAKElight, LOW);
  }
}
